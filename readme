# Selenium Web Automation Project 

This project demonstrates a simple **web automation test** using **Selenium WebDriver** and **Python**.  
It automatically opens Google, searches for a keyword ("javatpoint"), and then closes the browser.

##  Project Structure

```
selenium-test-project/
‚îú‚îÄ‚îÄ venv/               # Python virtual environment (ignored by Git)
‚îú‚îÄ‚îÄ testbrowser.py      # Selenium test script
‚îú‚îÄ‚îÄ requirements.txt    # List of required Python packages
‚îú‚îÄ‚îÄ .gitignore          # Files and folders to ignore in Git
‚îî‚îÄ‚îÄ README.md           # Project documentation
```

##  Technologies Used

- Python 3.x
- Selenium WebDriver
- WebDriver Manager
- Chrome Browser
- Git + GitHub (Version Control)

##  How to Setup and Run

1. **Clone the repository**
   ```bash
   git clone https://github.com/DaringPhoenix42/selenium-test-project-devops-exp.git
   cd selenium-test-project
   ```

2. **Create and activate virtual environment**
   ```bash
   python -m venv venv
   venv\Scripts\activate       # On Windows
   source venv/bin/activate    # On Linux/Mac
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Run the test**
   ```bash
   python testbrowser.py
   ```

5. Chrome browser will open, perform a search, and close automatically! üéØ

##  Features

- Automated Chrome browser interaction
- No need to manually download `chromedriver.exe`
- Professional Python project structure
- Easy to extend with multiple test cases

##  Learning Goals

- Setup Selenium WebDriver with Python
- Manage drivers automatically using WebDriver Manager
- Build maintainable automation scripts
- Basic Git and GitHub usage for DevOps projects

## To-Do (Future Improvements)

- Add more complex test cases
- Setup Pytest for better testing framework
- Integrate with Jenkins for CI/CD automation
- Run tests on multiple browsers (Cross-browser Testing)


---

> Made with ‚ù§Ô∏è using Python and Selenium.
